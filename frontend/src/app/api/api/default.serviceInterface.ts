/**
 * Workday Activity Tracker API
 * API for managing work tasks and generating reports.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { BlockReason } from '../model/models';
import { Note } from '../model/models';
import { Report } from '../model/models';
import { Task } from '../model/models';
import { TasksIdNotesPostRequest } from '../model/models';
import { TasksIdResolvePutRequest } from '../model/models';
import { TasksIdSubtasksPostRequest } from '../model/models';
import { TasksPostRequest } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface DefaultServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Get daily report
     * 
     * @param date 
     * @param filter 
     */
    reportsGet(date: string, filter?: 'ALL' | 'COMPLETED' | 'UNFINISHED' | 'CREATED', extraHttpRequestParams?: any): Observable<Report>;

    /**
     * List all ongoing tasks
     * 
     */
    tasksGet(extraHttpRequestParams?: any): Observable<Array<Task>>;

    /**
     * Block a task
     * 
     * @param id 
     * @param blockReason 
     */
    tasksIdBlockPut(id: number, blockReason: BlockReason, extraHttpRequestParams?: any): Observable<Task>;

    /**
     * Finish a task
     * 
     * @param id 
     */
    tasksIdFinishPut(id: number, extraHttpRequestParams?: any): Observable<Task>;

    /**
     * Get task details
     * 
     * @param id 
     */
    tasksIdGet(id: number, extraHttpRequestParams?: any): Observable<Task>;

    /**
     * Add a note to a task
     * 
     * @param id 
     * @param tasksIdNotesPostRequest 
     */
    tasksIdNotesPost(id: number, tasksIdNotesPostRequest: TasksIdNotesPostRequest, extraHttpRequestParams?: any): Observable<Note>;

    /**
     * Pause a task
     * 
     * @param id 
     */
    tasksIdPausePut(id: number, extraHttpRequestParams?: any): Observable<Task>;

    /**
     * Resolve a blocked task
     * 
     * @param id 
     * @param tasksIdResolvePutRequest 
     */
    tasksIdResolvePut(id: number, tasksIdResolvePutRequest: TasksIdResolvePutRequest, extraHttpRequestParams?: any): Observable<Task>;

    /**
     * Start or resume a task
     * 
     * @param id 
     */
    tasksIdStartPut(id: number, extraHttpRequestParams?: any): Observable<Task>;

    /**
     * Add a subtask
     * 
     * @param id 
     * @param tasksIdSubtasksPostRequest 
     */
    tasksIdSubtasksPost(id: number, tasksIdSubtasksPostRequest: TasksIdSubtasksPostRequest, extraHttpRequestParams?: any): Observable<Task>;

    /**
     * Create a new task
     * 
     * @param tasksPostRequest 
     */
    tasksPost(tasksPostRequest: TasksPostRequest, extraHttpRequestParams?: any): Observable<Task>;

}
